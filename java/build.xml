<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Copyright 2005 Apache Software Foundation 
 
  Licensed under the Apache License, Version 2.0 (the "License"); 
  you may not use this file except in compliance with the License. 
  You may obtain a copy of the License at 
  
      http://www.apache.org/licenses/LICENSE-2.0 
  
  Unless required by applicable law or agreed to in writing, software 
  distributed under the License is distributed on an "AS IS" BASIS, 
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
  See the License for the specific language governing permissions and 
  limitations under the License.
  
  TODO:
  	- include XMLSchema from XS commons into woden api and impl jars.
  	- SVN extract and tag.
  	- Automatic upload to download server and website.
 -->
<project name="woden" default="buildImplAndAPI" basedir=".">
	<property file="${basedir}/build.properties" />
	<property name="build.home" value="." />
	<property name="build.output" value="${build.home}/build" />
   <property name="build.output.jar" value="${build.output}/jar" />
   <property name="build.output.dist" value="${build.output}/dist" />
   <property name="build.output.dist.checksums" value="${build.output.dist}/checksums" />
	<property name="version" value="1.0.0" />
	<property name="downloads" value="${build.home}/downloads" />
	<property name="libraryDir" value="${downloads}/lib" />
	<property name="w3cDir" value="${downloads}/w3c" />
	<property name="w3cAssertsDir" value="${downloads}/wsdl20" />
	<property name="build.classes" value="${build.output}/classes" />
	<property name="build.classes.qname" value="${build.output}/classes/qname" />
   <property name="build.classes.api" value="${build.output}/classes/api" />
   <property name="build.classes.impl" value="${build.output}/classes/impl" />
   <property name="build.classes.dom" value="${build.output}/classes/dom" />
   <property name="build.classes.om" value="${build.output}/classes/om" />
   <property name="build.classes.ant" value="${build.output}/classes/ant" />
   <property name="build.classes.eclipse" value="${build.output}/classes/eclipse" />
   <property name="build.classes.test" value="${build.output}/classes/test" />
	<property name="src.home" value="${build.home}/src" />
	<property name="schema.package.location" value="${src.home}/org/apache/woden/resolver" />
	<property name="schema.catalog.home" value="resources" />
	<property name="schema.catalog.location" value="${build.home}/${schema.catalog.home}" />
	<property name="testsrc.home" value="${build.home}/test/" />
	<property name="eclipseplugin" value="${build.home}/eclipseplugin" />
	<property name="manifestfile" value="META-INF/MANIFEST.MF" />
	<property name="build.javadoc" value="${build.output}/Javadoc" />
   <property name="ant-test" value="${build.home}/ant-test" />
    <property name="archiveDir" value="${build.output}/dist" />
    <property name="archiveDir.dom" value="${archiveDir}/${archive.dom.rootprefix}" />
    <property name="archiveDir.om" value="${archiveDir}/${archive.om.rootprefix}" />

	<!-- Default to a nightly build -->
	<property name="buildType" value="N" />
	
	<!-- create file URL properties for URI resolver -->
	<makeurl file="${basedir}/test/org/apache/woden/resolver/resources/w3cTests.catalog" property="w3cTests.catalog" validate="false"/>
	<makeurl file="${w3cDir}" property="w3cTests.catalog.baseloc" validate="false"/>

   <target name="buildAndTestAll" depends="buildAll, runAllJUnitTests" />
   
   <target name="buildAll" depends="clean, init, buildImplAndAPI, buildANT, buildEclipsePlugin, buildJavadoc, buildTests" />

   <target name="distBuild" depends="buildAndTestAll, createArchives, createChecksums" />

	<target name="showProperties">
		<echo message="basedir=${basedir}" />
		<echo message="build.output=${build.output}" />
		<echo message="downloads=${downloads}" />
		<echo message="libraryDir=${libraryDir}" />
		<echo message="w3cDir=${w3cDir}" />
		<echo message="w3cAssertsDir=${w3cAssertsDir}" />
		<echo message="build.classes=${build.classes}" />
		<echo message="build.classes.api=${build.classes.api}" />
		<echo message="build.classes.ant=${build.classes.ant}" />
		<echo message="build.classes.test=${build.classes.test}" />
		<echo message="test.results=${test.results}" />
		<echo message="src.home=${src.home}" />
		<echo message="schema.package.location=${schema.package.location}" />
		<echo message="schema.catalog.home=${schema.catalog.home}" />
		<echo message="schema.catalog.location=${schema.catalog.location}" />
		<echo message="testsrc.home=${testsrc.home}" />
		<echo message="eclipseplugin=${eclipseplugin}" />
		<echo message="manifestfile=${manifestfile}" />
		<echo message="build.javadoc=${build.javadoc}" />
		<echo message="XmlSchemaURL=${XmlSchemaURL}" />
		<echo message="XmlSchemaFile=${XmlSchemaFile}" />
		<echo message="XercesURL=${XercesURL}" />
		<echo message="XercesFile=${XercesFile}" />
		<echo message="XercesJar1=${XercesJar1}" />
		<echo message="XercesJar2=${XercesJar2}" />
		<echo message="AntURL=${AntURL}" />
		<echo message="AntFile=${AntFile}" />
		<echo message="AntJar=${AntJar}" />
		<echo message="WSDL4JURL=${WSDL4JURL}" />
		<echo message="WSDL4JFile=${WSDL4JFile}" />
		<echo message="AxiomApiURL=${AxiomApiURL}" />
		<echo message="AxiomApiFile=${AxiomApiFile}" />
		<echo message="AxiomImplURL=${AxiomImplURL}" />
		<echo message="AxiomImplFile=${AxiomImplFile}" />
		<echo message="CommonsLoggingURL=${CommonsLoggingURL}" />
		<echo message="CommonsLoggingFile=${CommonsLoggingFile}" />
		<echo message="StaxURL=${StaxURL}" />
		<echo message="StaxFile=${StaxFile}" />
		<echo message="WstxURL=${WstxURL}" />
		<echo message="WstxFile=${WstxFile}" />
		<echo message="W3cWsdl20URL=${W3cWsdl20URL}" />
		<echo message="W3cWsdl20File=${W3cWsdl20File}" />
		<echo message="W3cAssertsURL=${W3cAssertsURL}" />
		<echo message="W3cAssertsFile=${W3cAssertsFile}" />
		<echo message="build.home=${build.home}" />
		<echo message="version=${version}" />
		<echo message="milestone=${milestone}" />
		<echo message="buildType=${buildType}" />
		<echo message="archive.root.prefix=${archive.root.prefix}" />
		<echo message="w3cTests.catalog=${w3cTests.catalog}" />
		<echo message="w3cTests.catalog.baseloc=${w3cTests.catalog.baseloc}" />	
		<echo message="resolver.trace=${resolver.trace}" />	
	</target>


	<target name="init" depends="showProperties, getPreReq">
       <!-- Set timestamps and time dependent properties -->
		<tstamp>
			<format property="timestamp" pattern="yyyyMMdd_hhmm" />
           <format property="teststamp" pattern="kk_mm_ss" />
		</tstamp>
		<property name="defaultBuildId" value="${buildType}${timestamp}" />
       <property name="test.results" value="${build.output}/test-results/${teststamp}/" />

		<mkdir dir="${build.home}" />
		<mkdir dir="${build.output}" />
       <mkdir dir="${build.output.jar}" />
       <mkdir dir="${build.output.dist}" />

		<available classname="junit.framework.Test" property="junitAvailable" />
	</target>

	<target name="informJunit" unless="junitAvailable">
		<echo message="JUnit tests will not be compiled or run." />
		<echo message="In order to compile and run the JUnit tests you must install junit.jar on your classpath." />
	</target>

	<!-- Get prerequisite libraries for the build. -->
	<target name="getPreReq">
		<mkdir dir="${downloads}" />
		<mkdir dir="${libraryDir}" />
		<available file="${downloads}/${XercesFile}" property="Xerces.exists" />
		<available file="${downloads}/${AntFile}" property="Ant.exists" />
		<available file="${downloads}/${WSDL4JFile}" property="WSDL4J.exists" />

		<!-- W3C test suite zips -->
		<available file="${downloads}/${W3cWsdl20File}" property="W3cWsdl20File.exists" />
		<available file="${downloads}/${W3cAssertsFile}" property="W3cAssertsFile.exists" />

		<!-- The following jars are downloaded straight into the libraryDir -->
		<available file="${libraryDir}/${AxiomApiFile}" property="AxiomApi.exists" />
		<available file="${libraryDir}/${AxiomImplFile}" property="AxiomImpl.exists" />
		<available file="${libraryDir}/${CommonsLoggingFile}" property="CommonsLogging.exists" />
		<available file="${libraryDir}/${StaxFile}" property="Stax.exists" />
		<available file="${libraryDir}/${WstxFile}" property="Wstx.exists" />
		<available file="${libraryDir}/${XmlSchemaFile}" property="XmlSchema.exists" />

		<antcall target="getXmlSchema" />
		<antcall target="getXerces" />
		<antcall target="getAnt" />
		<antcall target="getWSDL4J" />
		<antcall target="getAxiomApi" />
		<antcall target="getAxiomImpl" />
		<antcall target="getCommonsLogging" />
		<antcall target="getStax" />
		<antcall target="getWstx" />
		<antcall target="getW3cWsdl20" />

		<!-- flatten the lib dir -->
		<copy todir="${libraryDir}">
			<mapper type="flatten" />
			<fileset dir="${libraryDir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<delete includeemptydirs="true">
			<fileset dir="${libraryDir}">
				<include name="**/*" />
				<exclude name="*.jar" />
			</fileset>
		</delete>
	</target>

	<!-- Get the latest version of XmlSchema from WS commons -->
	<target name="getXmlSchema" unless="XmlSchema.exists">
		<get src="${XmlSchemaURL}" dest="${libraryDir}/${XmlSchemaFile}" />
	</target>

	<!-- Get the latest version of Xerces and unzip it -->
	<target name="getXerces" unless="Xerces.exists">
		<get src="${XercesURL}" dest="${downloads}/${XercesFile}" />

		<unzip src="${downloads}/${XercesFile}" dest="${libraryDir}">
			<patternset>
				<include name="**/${XercesJar1}" />
				<include name="**/${XercesJar2}" />
			</patternset>
		</unzip>
	</target>

	<!-- Get the latest version of Ant and unzip it -->
	<target name="getAnt" unless="Ant.exists">
		<get src="${AntURL}" dest="${downloads}/${AntFile}" />

		<unzip src="${downloads}/${AntFile}" dest="${libraryDir}">
			<patternset>
				<include name="**/ant*.jar" />
			</patternset>
		</unzip>
	</target>

	<!-- Get the latest version of WSDL4J and unzip it -->
	<target name="getWSDL4J" unless="WSDL4J.exists">
		<get src="${WSDL4JURL}" dest="${downloads}/${WSDL4JFile}" />

		<unzip src="${downloads}/${WSDL4JFile}" dest="${libraryDir}">
			<patternset>
				<include name="**/wsdl4j*.jar" />
			</patternset>
		</unzip>
	</target>

	<!-- Get the latest W3C WSDL 2.0 Test Cases and Schemas and unzip it -->
	<target name="getW3cWsdl20" depends="getW3cWsdl20File, getW3cAssertsFile" description="--> Gets the W3C Test Suite"/>
	
	<target name="getW3cWsdl20File" unless="W3cWsdl20File.exists">
		<mkdir dir="${w3cDir}" />
		<get src="${W3cWsdl20URL}" dest="${downloads}/${W3cWsdl20File}" />

		<unzip src="${downloads}/${W3cWsdl20File}" dest="${w3cDir}" />
	</target>

	<target name="clean-w3c-test-suite" description="--> Deletes W3C test suite.">
		<delete file="${downloads}/${W3cWsdl20File}" />
		<delete dir="${w3cDir}" />
	</target>

	<target name="getW3cAssertsFile" unless="W3cAssertsFile.exists">
		<mkdir dir="${w3cAssertsDir}" />
		<get src="${W3cAssertsURL}" dest="${downloads}/${W3cAssertsFile}" />

		<unzip src="${downloads}/${W3cAssertsFile}" dest="${w3cAssertsDir}" />
	</target>

	<target name="clean-w3c-asserts" description="--> Deletes W3C assertions.">
		<delete file="${downloads}/${W3cAssertsFile}" />
		<delete dir="${w3cAssertsDir}" />
	</target>

	<target name="refresh-w3c-test-suite" description="--> Refreshes W3C test suite." depends="clean-w3c-test-suite, clean-w3c-asserts, getW3cWsdl20, getW3cAssertsFile">
	</target>

	<!-- Get the latest version of Axiom Api jar -->
	<target name="getAxiomApi" unless="AxiomApi.exists">
		<get src="${AxiomApiURL}" dest="${libraryDir}/${AxiomApiFile}" />
	</target>

	<!-- Get the latest version of Axiom Impl jar -->
	<target name="getAxiomImpl" unless="AxiomImpl.exists">
		<get src="${AxiomImplURL}" dest="${libraryDir}/${AxiomImplFile}" />
	</target>

	<!-- Get the latest version of Commons Logging Api jar -->
	<target name="getCommonsLogging" unless="CommonsLogging.exists">
		<get src="${CommonsLoggingURL}" dest="${libraryDir}/${CommonsLoggingFile}" />
	</target>

	<!-- Get the latest version of Stax API jar -->
	<target name="getStax" unless="Stax.exists">
		<get src="${StaxURL}" dest="${libraryDir}/${StaxFile}" />
	</target>

	<!-- Get the latest version of Wstx API jar -->
	<target name="getWstx" unless="Wstx.exists">
		<get src="${WstxURL}" dest="${libraryDir}/${WstxFile}" />
	</target>

   <!-- This task builds the Woden API and implementation jar files. -->
   <target name="buildImplAndAPI" depends="buildAPI, buildDOM, buildOM" />

	<!-- This task builds the Woden API jar file. -->
	<target name="buildQName" depends="init">
		<mkdir dir="${build.classes.qname}" />
		<javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.qname}">
	    	<include name="**/javax/xml/namespace/*.java" />
		</javac>
	</target>
   <!-- This task builds the Woden API jar file. -->
   <target name="buildAPI" depends="init, buildQName">
       <mkdir dir="${build.classes.api}" />
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.api}">
			<classpath>
               <pathelement location="${libraryDir}/${XmlSchemaFile}" />
				<pathelement location="${build.classes.qname}"/>
			</classpath>
			<include name="**/*.java" />
           <exclude name="**/internal/**/*.java" />
           <exclude name="**/tool/converter/*.java" />
           <exclude name="**/org/apache/woden/ant/**/*.java" />
           <exclude name="**/javax/xml/namespace/*.java" />
		</javac>

		<!-- Copy all non Java files. -->
       <copy todir="${build.classes.api}">
			<fileset dir="${src.home}">
				<include name="**/*" />
				<exclude name="**/*.java" />
               <exclude name="**/internal/**" />
               <exclude name="**/tool/**" />
               <exclude name="**/org/apache/woden/ant/**" />
               <exclude name="**/javax/**" />
			</fileset>
		</copy>

		<!-- Copy the LICENSE and NOTICE files. -->
       <mkdir dir="${build.classes.api}/META-INF" />
       <copy todir="${build.classes.api}/META-INF">
			<fileset dir="${build.home}">
				<include name="LICENSE" />
				<include name="NOTICE" />
				<include name="README" />
			</fileset>
		</copy>

       <jar destfile="${build.output.jar}/${api.name}.jar" basedir="${build.classes.api}" />
   </target>

   <!-- This task compiles all of the Woden implementation classes -->
   <target name="buildImpl" depends="init,buildAPI">
       <mkdir dir="${build.classes.impl}" />
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.impl}">
           <classpath>
               <fileset dir="${libraryDir}">
                   <include name="**/*.jar" />
               </fileset>
               <pathelement location="${build.output}/jar/${api.name}.jar" />
           </classpath>
           <include name="**/internal/**/*.java" />
           <include name="**/javax/xml/namespace/*.java" />
           <include name="**/tool/converter/*.java" />
       </javac>
   </target>

   <!-- This task builds the Woden DOM implementation jar file. -->
   <target name="buildDOM" depends="init, buildAPI">
       <mkdir dir="${build.classes.dom}" />

       <!-- Compile all common and DOM-specific Java files. -->
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.dom}">
           <classpath>
               <fileset dir="${libraryDir}">
                   <include name="**/*.jar" />
               </fileset>
               <pathelement location="${build.output}/jar/${api.name}.jar" />
           </classpath>
           <include name="**/internal/**/*.java" />
           <include name="**/javax/xml/namespace/*.java" />
           <include name="**/tool/converter/*.java" />
           <exclude name="**/internal/OM**.java" />
           <exclude name="**/internal/resolver/OM**.java" />
           <exclude name="**/internal/util/om/**" />
           <exclude name="**/xpointer/OM**.java" />
        </javac>

       <!-- Copy all common and DOM-specific non-Java files. -->
       <copy todir="${build.classes.dom}">
           <fileset dir="${src.home}">
               <include name="**/internal/**/*" />
               <include name="**/javax/xml/namespace/**/*" />
               <include name="**/tool/converter/*" />
               <exclude name="${schema.catalog.home}/*" />
               <exclude name="**/internal/OM*" />
               <exclude name="**/internal/resolver/OM*" />
               <exclude name="**/internal/util/om/**" />
               <exclude name="**/*.java" />
			</fileset>
		</copy>

	    <!-- copy the standard schema resolver catalog --> 
	    <copy todir="${build.classes.dom}/META-INF">
		    <fileset dir="${schema.catalog.location}">
			    <include name="schema.catalog" />
		    </fileset>
	    </copy>
   	
       <!-- Copy the LICENSE and NOTICE files. -->
       <mkdir dir="${build.classes.dom}/META-INF" />
       <copy todir="${build.classes.dom}/META-INF">
           <fileset dir="${build.home}">
               <include name="LICENSE" />
               <include name="NOTICE" />
               <include name="README" />
           </fileset>
       </copy>

       <jar destfile="${build.output.jar}/${dom.impl.name}.jar" basedir="${build.classes.dom}" />
	</target>

   <!-- This task builds the Woden OM implementation jar file. -->
   <target name="buildOM" depends="init, buildAPI">
       <mkdir dir="${build.classes.om}" />
                   
       <!-- Compile all common and OM-specific Java files. -->
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.om}">
           <classpath>
               <fileset dir="${libraryDir}">
                   <include name="**/*.jar" />
               </fileset>
               <pathelement location="${build.output}/jar/${api.name}.jar" />
           </classpath>
           <include name="**/internal/**/*.java" />
           <include name="**/javax/xml/namespace/*.java" />
           <include name="**/tool/converter/*.java" />
           <exclude name="**/internal/DOM**.java" />
           <exclude name="**/internal/resolver/DOM**.java" />
           <exclude name="**/internal/util/dom/**" />
           <exclude name="**/xpointer/DOM**.java" />
     	</javac>

       <!-- Copy all common and OM-specific non-Java files. -->
       <copy todir="${build.classes.om}">
			<fileset dir="${src.home}">
               <include name="**/internal/**/*" />
               <include name="**/javax/xml/namespace/**/*" />
               <include name="**/tool/converter/*" />
               <exclude name="${schema.catalog.home}/*" />
               <exclude name="**/internal/DOM*" />
               <exclude name="**/internal/resolver/DOM*" />
               <exclude name="**/internal/util/dom/**" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

        <!-- copy the standard schema resolver catalog --> 
        <copy todir="${build.classes.om}/META-INF">
	        <fileset dir="${schema.catalog.location}">
		        <include name="schema.catalog" />
	        </fileset>
        </copy>
	
		<!-- Copy the LICENSE and NOTICE files. -->
       <mkdir dir="${build.classes.om}/META-INF" />
       <copy todir="${build.classes.om}/META-INF">
			<fileset dir="${build.home}">
				<include name="LICENSE" />
				<include name="NOTICE" />
				<include name="README" />
			</fileset>
		</copy>

       <jar destfile="${build.output.jar}/${om.impl.name}.jar" basedir="${build.classes.om}" />
	</target>

	<!-- This task builds the Woden ANT jar file. -->
   <target name="buildANT" depends="init, buildAPI">
		<mkdir dir="${build.classes.ant}" />
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.ant}">
           <classpath>
               <pathelement location="${libraryDir}/${XmlSchemaFile}" />
               <pathelement location="${libraryDir}/${AxiomImplFile}" />
               <pathelement location="${libraryDir}/${AxiomApiFile}" />
               <pathelement location="${libraryDir}/${CommonsLoggingFile}" />
               <pathelement location="${libraryDir}/${StaxFile}" />
               <pathelement location="${libraryDir}/${WstxFile}" />
               <pathelement location="${libraryDir}/${XercesJar1}" />
               <pathelement location="${libraryDir}/${XercesJar2}" />
               <pathelement location="${build.output}/jar/${api.name}.jar" />
           </classpath>
			<include name="org/apache/woden/ant/**/*.java" />
		</javac>
		<!-- Copy all non Java files. -->
		<copy todir="${build.classes.ant}">
			<fileset dir="${src.home}">
				<include name="org.apache.woden.ant/**/*" />
			</fileset>
		</copy>

		<!-- Copy the LICENSE and NOTICE files. -->
		<mkdir dir="${build.classes.ant}/META-INF" />
		<copy todir="${build.classes.ant}/META-INF">
			<fileset dir="${build.home}">
				<include name="LICENSE" />
				<include name="NOTICE" />
				<include name="README" />
			</fileset>
		</copy>

       <jar destfile="${build.output.jar}/${ant.name}.jar" basedir="${build.classes.ant}" />
	</target>

	<!-- This task builds a Woden Eclipse Plugin.
        The plugin contains the API and implementation. -->
   <target name="buildEclipsePlugin" depends="init">
       <mkdir dir="${build.classes.eclipse}" />

       <!-- Compile all API and Implementation Class files. -->
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${src.home}" destdir="${build.classes.om}">
           <classpath>
               <fileset dir="${libraryDir}">
                   <include name="**/*.jar" />
               </fileset>
           </classpath>
       </javac>

       <copy todir="${build.classes.eclipse}">
			<fileset dir="${eclipseplugin}" />
		</copy>

       <replace file="${build.classes.eclipse}/${manifestfile}" token="*VERSION_NUMBER*" value="${version}" />

       <jar destfile="${build.output.jar}/org.apache.woden_${version}.jar" basedir="${build.classes.eclipse}" manifest="${build.classes.eclipse}/${manifestfile}" />
	</target>

	<!-- This task builds the Woden tests jar file. -->
	<target name="buildTests" depends="init, informJunit, buildImplAndAPI, buildANT" if="junitAvailable">
		<mkdir dir="${build.classes.test}" />
       <javac debug="true" debuglevel="vars,lines,source" sourcepath="" srcdir="${testsrc.home}" destdir="${build.classes.test}">
           <classpath>
               <pathelement location="${libraryDir}/${XmlSchemaFile}" />
               <pathelement location="${libraryDir}/${AxiomImplFile}" />
               <pathelement location="${libraryDir}/${AxiomApiFile}" />
               <pathelement location="${libraryDir}/${CommonsLoggingFile}" />
               <pathelement location="${libraryDir}/${StaxFile}" />
               <pathelement location="${libraryDir}/${WstxFile}" />
               <pathelement location="${libraryDir}/${XercesJar1}" />
               <pathelement location="${libraryDir}/${XercesJar2}" />
               <pathelement location="${build.output.jar}/${ant.name}.jar" />
               <pathelement location="${build.output.jar}/${api.name}.jar" />
               <pathelement location="${build.output.jar}/${dom.impl.name}.jar" />
               <pathelement location="${build.output.jar}/${om.impl.name}.jar" />
           </classpath>
       </javac>

		<!-- Copy all non Java files. -->
		<copy todir="${build.classes.test}">
			<fileset dir="${testsrc.home}">
				<include name="**/*" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<!-- Copy the LICENSE and NOTICE files. -->
		<mkdir dir="${build.classes.test}/META-INF" />
		<copy todir="${build.classes.test}/META-INF">
			<fileset dir="${build.home}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
		</copy>

       <jar destfile="${build.output.jar}/${test.name}.jar" basedir="${build.classes.test}" />
	</target>

	<!--  This task builds the Woden Javadoc. -->
	<target name="buildJavadoc" depends="init">
		<javadoc destdir="${build.javadoc}">
			<classpath>
				<fileset dir="${libraryDir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<fileset dir="${src.home}">
				<include name="**/*.java" />
				<exclude name="**/internal/**/*.java" />
			</fileset>
		</javadoc>
	</target>

   <!-- Targets for the JUnit tests -->
   
   <target name="runAllJUnitTests"
           depends="allWodenJUnitTests, allAntJUnitTests, createTestReport"
           description="This runs all the JUnit tests on woden and creates reports for them."
   />

   <target name="runOMTests"
           depends="allOMJUnitTests, createTestReport"
           description="This runs all the OM JUnit tests on woden and creates reports for them."
   />

   <target name="runDOMTests"
           depends="allDOMJUnitTests, createTestReport"
           description="This runs all the DOM JUnit tests on woden and creates reports for them."
   />

   <target name="initTests">
       <mkdir dir="${test.results}/xml" />
		<mkdir dir="${test.results}" />
   </target>
   
   <target name="createTestReport">
       <junitreport>
           <fileset dir="${test.results}/xml">
               <include name="*.xml" />
           </fileset>
           <report format="noframes" todir="${test.results}" />
       </junitreport>
   </target>
   
   <!-- JUnit tests for both DOM and StAX/OM parsers
           This is not meant to be run on its own. -->
   <target name="allWodenJUnitTests" depends="init, informJunit, buildTests, initTests" if="junitAvailable">
       <junit showoutput="true" fork="yes">
			<classpath>
               <pathelement location="${build.classes.api}" />
               <pathelement location="${build.classes.dom}" />
               <pathelement location="${build.classes.om}" />
				<pathelement location="${build.classes.ant}" />
				<pathelement location="${build.classes.test}" />
				<pathelement location="${libraryDir}/${XmlSchemaFile}" />
				<pathelement location="${libraryDir}/${AxiomImplFile}" />
				<pathelement location="${libraryDir}/${AxiomApiFile}" />
				<pathelement location="${libraryDir}/${CommonsLoggingFile}" />
				<pathelement location="${libraryDir}/${StaxFile}" />
				<pathelement location="${libraryDir}/${WstxFile}" />
				<pathelement location="${libraryDir}/${XercesJar1}" />
				<pathelement location="${libraryDir}/${XercesJar2}" />
			</classpath>
           
			<sysproperty key="org.apache.woden.resolver.logging" value="${resolver.trace}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.catalog" value="${w3cTests.catalog}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.baseURIs" value="${w3cTests.catalog.baseloc}" />

           <test name="org.apache.woden.tests.AllWodenTests" haltonfailure="no" todir="${test.results}/xml">
				<formatter type="xml" />
			</test>
		</junit>
	</target>
	
   <!-- JUnit tests for Ant only,
           To create the report you also need to run the createTestReport target. -->
   <target name="allAntJUnitTests" depends="init, informJunit, buildTests, initTests" if="junitAvailable">
       <junit showoutput="true" fork="yes">
			<classpath>
				<pathelement location="${build.classes.ant}" />
				<pathelement location="${build.classes.test}" />
			</classpath>
           
			<sysproperty key="org.apache.woden.resolver.logging" value="${resolver.trace}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.catalog" value="${w3cTests.catalog}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.baseURIs" value="${w3cTests.catalog.baseloc}" />

           <test name="org.apache.woden.ant.ObjectIdTableTest" haltonfailure="no" todir="${test.results}/xml">
				<formatter type="xml" />
			</test>
		</junit>
	</target>
	
   <!-- JUnit tests for DOM only,
           To create the report you also need to run the createTestReport target. -->
   <target name="allDOMJUnitTests" depends="init, informJunit, buildTests, initTests" if="junitAvailable">
       <junit showoutput="true" fork="yes">
			<classpath>
               <pathelement location="${build.classes.api}" />
               <pathelement location="${build.classes.dom}" />
				<pathelement location="${build.classes.test}" />
				<pathelement location="${libraryDir}/${XmlSchemaFile}" />
				<pathelement location="${libraryDir}/${XercesJar1}" />
				<pathelement location="${libraryDir}/${XercesJar2}" />
			</classpath>
           
			<sysproperty key="org.apache.woden.resolver.logging" value="${resolver.trace}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.catalog" value="${w3cTests.catalog}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.baseURIs" value="${w3cTests.catalog.baseloc}" />

           <test name="org.apache.woden.tests.AllWodenTestsDOM" haltonfailure="no" todir="${test.results}/xml">
				<formatter type="xml" />
			</test>
		</junit>
	</target>

   <!-- JUnit tests for StAX/OM alone,
           To create the report you also need to run the createTestReport target. -->
   <target name="allOMJUnitTests" depends="init, informJunit, buildTests, initTests" if="junitAvailable">
       <junit showoutput="true" fork="yes">
			<classpath>
               <pathelement location="${build.classes.api}" />
               <pathelement location="${build.classes.om}" />
				<pathelement location="${build.classes.test}" />
				<pathelement location="${libraryDir}/${XmlSchemaFile}" />
				<pathelement location="${libraryDir}/${AxiomApiFile}" />
				<pathelement location="${libraryDir}/${AxiomImplFile}" />
				<pathelement location="${libraryDir}/${CommonsLoggingFile}" />
				<pathelement location="${libraryDir}/${StaxFile}" />
				<pathelement location="${libraryDir}/${WstxFile}" />
			</classpath>
           
			<sysproperty key="org.apache.woden.resolver.logging" value="${resolver.trace}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.catalog" value="${w3cTests.catalog}" />
			<sysproperty key="org.apache.woden.resolver.simpleresolver.baseURIs" value="${w3cTests.catalog.baseloc}" />

           <test name="org.apache.woden.tests.AllWodenTestsOM" haltonfailure="no" todir="${test.results}/xml">
				<formatter type="xml" />
			</test>
		</junit>
	</target>

	<!-- Create the zip and tar.gz archives -->
   <target name="createArchives" depends="createZip, createTarGzBz2, createSrcZip, createSrcTarGzBz2" />

   <target name="createDOMDist" depends="init, buildDOM, buildJavadoc">
       <mkdir dir="${archiveDir.dom}" />
       <mkdir dir="${archiveDir.dom}/lib" />
       <mkdir dir="${archiveDir.dom}/doc" />
       <mkdir dir="${archiveDir.dom}/doc/apiDocs" />

		<!-- Copy the woden jars -->
       <copy todir="${archiveDir.dom}/lib">
           <fileset dir="${build.output}/jar/">
				<include name="${api.name}.jar" />
               <include name="${dom.impl.name}.jar" />
			</fileset>
		</copy>

		<!-- Copy the downloaded libraries -->
       <copy todir="${archiveDir.dom}/lib">
			<fileset dir="${libraryDir}">
               <include name="${XercesJar1}" />
               <include name="${XercesJar2}" />
               <include name="${XmlSchemaFile}" />
			</fileset>
		</copy>

		<!-- Copy the JavaDoc -->
       <copy todir="${archiveDir.dom}/doc/apiDocs">
			<fileset dir="${build.javadoc}" />
		</copy>

		<!-- Copy the root files such as license, readme -->
       <copy todir="${archiveDir.dom}">
			<fileset dir="${build.home}">
				<include name="LICENSE" />
				<include name="NOTICE" />
				<include name="README" />
				<include name="release-notes.html" />
			</fileset>
		</copy>
       <copy todir="${archiveDir.dom}/lib">
			<fileset dir="${build.home}">
				<include name="LICENSE.dom" />
				<include name="LICENSE.sax" />
				<include name="LICENSE.xerces" />
				<include name="LICENSE.wsdl4j.html" />
			</fileset>
		</copy>
   </target>

   <target name="createOMDist" depends="init, buildOM, buildJavadoc">
       <mkdir dir="${archiveDir.om}" />
       <mkdir dir="${archiveDir.om}/lib" />
       <mkdir dir="${archiveDir.om}/doc" />
       <mkdir dir="${archiveDir.om}/doc/apiDocs" />

       <!-- Copy the woden jars -->
       <copy todir="${archiveDir.om}/lib">
           <fileset dir="${build.output}/jar/">
               <include name="${api.name}.jar" />
               <include name="${om.impl.name}.jar" />
           </fileset>
       </copy>

       <!-- Copy the downloaded libraries -->
       <copy todir="${archiveDir.om}/lib">
           <fileset dir="${libraryDir}">
               <include name="${AxiomApiFile}" />
               <include name="${AxiomImplFile}" />
               <include name="${StaxFile}" />
               <include name="${WstxFile}" />
               <include name="${CommonsLoggingFile}" />
               <include name="${XmlSchemaFile}" />
           </fileset>
       </copy>

       <!-- Copy the JavaDoc -->
       <copy todir="${archiveDir.om}/doc/apiDocs">
           <fileset dir="${build.javadoc}" />
       </copy>

       <!-- Copy the root files such as license, readme -->
       <copy todir="${archiveDir.om}">
           <fileset dir="${build.home}">
               <include name="LICENSE" />
               <include name="NOTICE" />
               <include name="README" />
               <include name="release-notes.html" />
           </fileset>
       </copy>
       <copy todir="${archiveDir.om}/lib">
           <fileset dir="${build.home}">
               <include name="LICENSE.dom" />
               <include name="LICENSE.sax" />
               <include name="LICENSE.xerces" />
               <include name="LICENSE.wsdl4j.html" />
           </fileset>
       </copy>
	</target>

	<!-- Builds a zip of the distributable dir -->
   <target name="createZip" depends="createDOMDist, createOMDist">
       <!-- Create DOM zip -->
       <zip destfile="${build.output.dist}/${archive.dom.name}.zip">
           <zipfileset dir="${archiveDir.dom}" prefix="${archive.dom.rootprefix}" />
		</zip>
       <!-- Create OM zip -->
       <zip destfile="${build.output.dist}/${archive.om.name}.zip">
           <zipfileset dir="${archiveDir.om}" prefix="${archive.om.rootprefix}" />
       </zip>
	</target>

	<!-- Builds a tar.gz and tar.bz2 of the distributable dir -->
   <target name="createTarGzBz2" depends="createDOMDist, createOMDist">
       <!-- Create DOM .tar then .gz and .bz2 files. -->
       <tar destfile="${build.output.dist}/${archive.dom.name}.tar">
           <tarfileset dir="${archiveDir.dom}" prefix="${archive.dom.rootprefix}" />
		</tar>
       <gzip destfile="${build.output.dist}/${archive.dom.name}.tar.gz" src="${build.output.dist}/${archive.dom.name}.tar" />
       <bzip2 destfile="${build.output.dist}/${archive.dom.name}.tar.bz2" src="${build.output.dist}/${archive.dom.name}.tar" />
       <delete file="${build.output.dist}/${archive.dom.name}.tar" />

       <!-- Create OM .tar then .gz and .bz2 files. -->
       <tar destfile="${build.output.dist}/${archive.om.name}.tar">
           <tarfileset dir="${archiveDir.om}" prefix="${archive.om.rootprefix}" />
       </tar>
       <gzip destfile="${build.output.dist}/${archive.om.name}.tar.gz" src="${build.output.dist}/${archive.om.name}.tar" />
       <bzip2 destfile="${build.output.dist}/${archive.om.name}.tar.bz2" src="${build.output.dist}/${archive.om.name}.tar" />
       <delete file="${build.output.dist}/${archive.om.name}.tar" />
	</target>

	<!-- Builds a zip of the source code -->
	<target name="createSrcZip" depends="init">
       <zip destfile="${build.output.dist}/${archive.src.name}.zip">
           <zipfileset dir="${build.home}/src" prefix="${archive.src.rootprefix}/src" />
           <zipfileset dir="${build.home}/test" prefix="${archive.src.rootprefix}/test" />
           <zipfileset dir="${build.home}/ant-test" prefix="${archive.src.rootprefix}/ant-test" />
           <zipfileset dir="${build.home}/eclipseplugin" prefix="${archive.src.rootprefix}/eclipseplugin" />
           <zipfileset dir="${build.home}" prefix="${archive.src.rootprefix}">
				<include name="LICENSE*" />
				<include name="NOTICE" />
				<include name="README" />
				<include name="build.properties" />
				<include name="build.xml" />
				<include name="pom.xml" />
				<include name="release-notes.html" />
			</zipfileset>
		</zip>
	</target>

	<!-- Builds a tar.gz and tar.bz2 of the source code -->
	<target name="createSrcTarGzBz2" depends="init">
       <tar destfile="${build.output.dist}/${archive.src.name}.tar">
           <tarfileset dir="${build.home}/src" prefix="${archive.src.rootprefix}/src" />
           <tarfileset dir="${build.home}/test" prefix="${archive.src.rootprefix}/test" />
           <tarfileset dir="${build.home}/ant-test" prefix="${archive.src.rootprefix}/ant-test" />
           <tarfileset dir="${build.home}/eclipseplugin" prefix="${archive.src.rootprefix}/eclipseplugin" />
           <tarfileset dir="${build.home}" prefix="${archive.src.rootprefix}">
				<include name="LICENSE*" />
				<include name="NOTICE" />
				<include name="README" />
				<include name="build.properties" />
				<include name="build.xml" />
				<include name="pom.xml" />
				<include name="release-notes.html" />
			</tarfileset>
		</tar>
       <gzip destfile="${build.output.dist}/${archive.src.name}.tar.gz" src="${build.output.dist}/${archive.src.name}.tar" />
       <bzip2 destfile="${build.output.dist}/${archive.src.name}.tar.bz2" src="${build.output.dist}/${archive.src.name}.tar" />
       <delete file="${build.output.dist}/${archive.src.name}.tar" />
	</target>

   <!-- Create checksums for the .zip, .tar.gz and .tar.bz2 files in dist -->
	<target name="createChecksums">
       <mkdir dir="${build.output.dist.checksums}" />
       <checksum todir="${build.output.dist.checksums}">
           <fileset dir="${build.output.dist}">
               <include name="*.tar.gz" />
               <include name="*.tar.bz2" />
               <include name="*.zip" />
           </fileset>
       </checksum>
       <checksum algorithm="SHA" todir="${build.output.dist.checksums}">
           <fileset dir="${build.output.dist}">
               <include name="*.tar.gz" />
               <include name="*.tar.bz2" />
               <include name="*.zip" />
           </fileset>
       </checksum>
	</target>

	<!-- A clean target to be run before builds. -->
	<target name="clean">
		<delete dir="${build.output}" />
	</target>

	<!-- This task copies the schema from an expanded w3c test-suite into the woden source tree -->
	<target name="copy-xsd-from-w3c-testsuite" depends="showProperties">				
		<!-- Copy the XML and WSDL Schema files from the w3c downloads. -->
		<copy todir="${schema.package.location}">
			<fileset dir="${w3cCatalogDir}/wsdl">
				<include name="wsdl20*.xsd" />
			</fileset>
		</copy>
		<copy todir="${schema.package.location}}">
			<fileset dir="${w3cCatalogDir}/xsd" />
		</copy>
	</target>
	
	<!-- This target downloads schema versions direct from location of w3c "latest" versions into the w3c test suite
	     overriding the standard set (if they exist)--> 
	<target name="copy-xsd-to-w3c-testsuite" depends="showProperties">
		<mkdir dir="${w3cCatalogDir}" />
		<mkdir dir="${w3cCatalogDir}/xsd" />
		<mkdir dir="${w3cCatalogDir}/wsdl" />
		<get dest="${w3cCatalogDir}/xsd/xml.xsd" src="http://www.w3.org/2001/xml.xsd" />
		<get dest="${w3cCatalogDir}/xsd/XMLSchema.xsd" src="http://www.w3.org/2001/XMLSchema.xsd" />
		<get dest="${w3cCatalogDir}/xsd/XMLSchema.dtd" src="http://www.w3.org/2001/XMLSchema.dtd" />
		<get dest="${w3cCatalogDir}/xsd/datatypes.dtd" src="http://www.w3.org/2001/datatypes.dtd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl20.xsd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20-extensions.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl-extensions.xsd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20-http.xsd" src="http://www.w3.org/2002/ws/desc/ns/http.xsd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20-instance.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl-instance.xsd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20-rpc.xsd" src="http://www.w3.org/2002/ws/desc/ns/rpc.xsd" />
		<get dest="${w3cCatalogDir}/wsdl/wsdl20-soap.xsd" src="http://www.w3.org/2002/ws/desc/ns/soap.xsd" />
	</target>

	<!-- This target downloads schema versions direct from location of w3c "latest" versions into the 
	     woden source tree (java package) location, overriding the standard set (if they exist)--> 
	<target name="copy-live-xsd-to-src" depends="showProperties">
		<get dest="${schema.package.location}/xml.xsd" src="http://www.w3.org/2001/xml.xsd" />
		<get dest="${schema.package.location}/XMLSchema.xsd" src="http://www.w3.org/2001/XMLSchema.xsd" />
		<get dest="${schema.package.location}/XMLSchema.dtd" src="http://www.w3.org/2001/XMLSchema.dtd" />
		<get dest="${schema.package.location}/datatypes.dtd" src="http://www.w3.org/2001/datatypes.dtd" />
		<get dest="${schema.package.location}/wsdl20.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl20.xsd" />
		<get dest="${schema.package.location}/wsdl20-extensions.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl-extensions.xsd" />
		<get dest="${schema.package.location}/wsdl20-http.xsd" src="http://www.w3.org/2002/ws/desc/ns/http.xsd" />
		<get dest="${schema.package.location}/wsdl20-instance.xsd" src="http://www.w3.org/2002/ws/desc/ns/wsdl-instance.xsd" />
		<get dest="${schema.package.location}/wsdl20-rpc.xsd" src="http://www.w3.org/2002/ws/desc/ns/rpc.xsd" />
		<get dest="${schema.package.location}/wsdl20-soap.xsd" src="http://www.w3.org/2002/ws/desc/ns/soap.xsd" />
	</target>
</project>
